name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run linting
        run: |
          pip install black==23.7.0 pylint==2.17.5
          black --version
          pylint --version
          black . --check
          pylint --rcfile=.pylintrc **/*.py || true

      - name: Run tests with coverage
        run: |
          pip install pytest==7.4.0 pytest-cov==4.1.0
          python -m pytest --version
          python -m pytest --cov=. --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          fail_ci_if_error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install security tools
        run: |
          pip install bandit safety

      - name: Run security scan
        run: |
          bandit -r . -f json -o security-report.json
          safety check

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.json

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install build

      - name: Build package
        run: python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    permissions:
      contents: read
      deployments: write
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.deployment_url }}

    steps:
      - uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Deploy to staging
        id: deploy
        env:
          STAGING_SERVER: ${{ secrets.STAGING_SERVER }}
          STAGING_TOKEN: ${{ secrets.STAGING_TOKEN }}
        run: |
          if [ -z "$STAGING_SERVER" ]; then
            echo "Error: STAGING_SERVER secret is not set"
            exit 1
          fi
          if [ -z "$STAGING_TOKEN" ]; then
            echo "Error: STAGING_TOKEN secret is not set"
            exit 1
          fi
          echo "Deploying to staging server at $STAGING_SERVER..."
          # Add your staging deployment script here
          echo "deployment_url=$STAGING_SERVER" >> $GITHUB_OUTPUT

  deploy-production:
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.deployment_url }}

    steps:
      - uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Deploy to production
        id: deploy
        env:
          PRODUCTION_SERVER: ${{ secrets.PRODUCTION_SERVER }}
          PRODUCTION_TOKEN: ${{ secrets.PRODUCTION_TOKEN }}
        run: |
          if [ -z "$PRODUCTION_SERVER" ]; then
            echo "Error: PRODUCTION_SERVER secret is not set"
            exit 1
          fi
          if [ -z "$PRODUCTION_TOKEN" ]; then
            echo "Error: PRODUCTION_TOKEN secret is not set"
            exit 1
          fi
          echo "Deploying to production server at $PRODUCTION_SERVER..."
          # Add your production deployment script here
          echo "deployment_url=$PRODUCTION_SERVER" >> $GITHUB_OUTPUT
